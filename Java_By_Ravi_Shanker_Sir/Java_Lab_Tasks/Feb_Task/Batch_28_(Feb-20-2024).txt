1.Choose the correct output of the following program

interface Add
{
	int add(int b);
}
public class FunctionalInterface {
	
	public static void main(String[] args)
	{
		int a = 10;
		
	     // Sub Class That means Lamda Expression
		Add add = (int b) -> b;
		System.out.println(add.add(a));
	}
}


Output :  // Here we don't need to curly brases because single argunment here
	  // And inside the Lamda Expression internally, "return" wroks return is
	  // optional if I writes the return  curly bresses is complusary
	  10		

2.Choose the correct output of the following program

@FunctionalInterface// here is Error because of in sub class name of that Class
interface Cube
{
	int cube(int b);
}
public class FunctionalInterface { // here we can't write the main Class name behalf of "@FunctionalInterface"
	
	public static void main(String[] args) {
		int a = 21;
		
		Cube cube = b -> b*b*b;  //Lambda Expression
		System.out.println(cube.cube(a));
	}
}

Output : Error
here invoke the Error because of ELC class name behalf of "@FunctionalInterface" 
whenever i writes the top of interface "@FunctionalInterface" and ELC class name 
writes the behalf of "@FunctionalInterface" that name invoke the Error

3.What is the output of the following program
interface Add
{
	int add(int b);
	int add(int a, int b);// inside the functional inter face we can not write the  two abstract method
}
public class FunctionalInterface {
	public static void main(String[] args) {
		int a = 21;

		//Lamda Expression is here(Sub Class and override the abstract of interface)
		Add add = b -> b+b;

		System.out.println(add.add(a));
	}
}
Output : Lamada Expression Works only Functional Interface only because of 
	 functional interface Contain only single Abstract method thats way
	 Lamda is understand okay and execute the  method

Error 

4.What is the output of the following program
@FunctionalInterface
interface Str
{
	int methodStr(String str);
}
public class FunctionalInterface {
	public static void main(String[] args) {
		Str str = (String s) -> "2"; // error because is not Convert the String to Interger here return type is int declare the Interface
		System.out.println(str.methodStr("2"));
	}
}
Output : Error 
	 here we can't convert the String to integer because of in interface declared a return type is int Lambda expression check the Abstract method 


5.Choose the correct output of the following program

public class FunctionalInterface {
	public static void main(String[] args) {
		String str -> str.compareTo("goolge");
		System.out.println(str);
	}
}

Solutions:
interface GHello{
	public abstract int hello(String str);
}

public class FunctionalInterface {
	public static void main(String[] args) {
		GHello str = str1 -> str1.compareTo("goolge"); //here is Compersion return the "Zero nad one" integer type and reference and lambda parameter should be different
		System.out.println(str.hello("google"));
	}
}



6.What is the output of the following code
@FunctionalInterface
interface NIT
{
	String get(String nit);
}
public class FunctionalInterfaceExample
{
	public static void main(String[] args) {
		NIT nit = (str) -> str +"Welcome to"; // str concatenate to "Welcome to" 
		NIT nit1 = (str) -> str + "NARESHIT"; // str1 concatenate to "NARESHIT"
		information("Hai ", nit); // HAI + Welcome to
		information("Hai ", nit1); // HAI + NARESHIT
	}
	public static void information(String str, NIT obj) {
		String result = obj.get(str);
		System.out.println(result);
	}
}

7.By using FunctionalInterface annotation following code is correct or not?
@FunctionalInterface
interface NIT
{
	String myInterface(String a);
	String newInterface();
	
}

8.What is the output of the following code
@FunctionalInterface
interface NIT{
 int square(int x);
 default int add(int a, int b){
     return a+b;
 }
 default int sub(int a, int b){
     return a-b;
 }
 static int multiply(int a, int b){
     return a*b;
 }
 static int divide(int a, int b){
     return a/b;
 }
}
public class FunctionalInterfaceExample implements NIT{
 public static void main(String[] args){
     int a = 25;
     int b = 5;
     FunctionalInterfaceExample fun = new FunctionalInterfaceExample();
     int add = fun.add(a,b);
     int sub = fun.sub(a,b);
     int mul = NIT.multiply(a,b);
     int div = NIT.divide(a,b);
     System.out.println(add+" "+sub+" "+mul+" "+div+" "+fun.square(6));
} 
 @Override
 public int square(int x) {
     return x*x;
 }
}

9.What is the output of the following code
@FunctionalInterface
interface NIT{
 int square(int x);
 static int add(int a, int b){
     return a+b;
 }
 static int sub(int a, int b){
     return a-b;
 }
 static int multiply(int a, int b){
     return a*b;
 }
 static int divide(int a, int b){
     return a/b;
 }
}
public class FunctionalInterfaceExample{
 public static void main(String[] args){
     int a = 25;
     int b = 5;  
     int add = NIT.add(a,b);
     int sub = NIT.sub(a,b);
     int mul = NIT.multiply(a,b);
     int div = NIT.divide(a,b);
     System.out.print(add+" "+sub+" "+mul+" "+div+" ");
      
     NIT sq = (x) -> 
     {
    	 return x*x;
     };
     System.out.print(sq.square(6));
 }
}

10. public class FunctionalInterfaceExample{
	public static void main(String[] args) {
		Function<String, String> fun = str -> str.substring(2,5);
		System.out.println(fun.apply("Hyderabad"));
	}
}
Answer: der

11.By using FunctionalInterface annotation following code is correct or not?
@FunctionalInterface
interface NIT
{
	String myInterface(String a);
	default void nit() 
	{
		
	}
	default int newInterface(int a) 
	{
		return a;
	}
}

12.Is there any error in following code?
@FunctionalInterface
interface NIT
{
	String myInterface(String a); //abstract method 
	int hashCode(); //Object class methods
	String toString();	
}
Answer:
Successfully Compiled, functional interface allows any Object class methods

13.Is there any error in following code?
@FunctionalInterface
interface NIT
{
	String myInterface(String a); //abstract method
	@Override
	String toString(); //Object class method
	void wait();
	void notify();
	
}

14.What is the output of the following code
public class FunctionalInterfaceExample{
	public static void main(String[] args) {
		Predicate<Integer> grater = a -> a >15;
		
		Predicate<Integer> less = a -> a <10;
		
		boolean bool = grater.test(20);
		boolean bool1 = less.test(5);
		System.out.println(bool);
		System.out.println(bool1);		
		
	}
}
Answer: 
true
true

15.What is the output of the following code
public class FunctionalInterfaceExample{
	public static void main(String[] args) 
	{
		String str[]= {"Java","Python","Naresh","IT"};
		
		Predicate<String> prediacte = p -> p.endsWith("va");
		for(String s: str) 
		{
			if(prediacte.test(s))
				System.out.println(s);
		}
	}
}


16.What is the output of the following code
interface NIT
{
	public int myInterface(int a);
}

public class Java8 {
	public static void main(String[] args) {
		NIT nit = (a) -> a+1;
		int i = nit.myInterface(6);
		System.out.println(i);
	}
}

17.What is the output of the following code?
@FunctionalInterface
interface NIT
{	
	int myInterface(int a);
}

@FunctionalInterface
interface NewInterface
{
	void alpha(String a);
}

public class Java8 {
	public static void main(String[] args) {
		NIT nit = (a) -> a*a*a;
		System.out.println(nit.myInterface(5));
		NewInterface result = (a) -> System.out.println("Welcome to NareshIT");
		result.alpha("");
	}
}

18.What is the output of the following code?
public class Java8 {
	public static void main(String[] args) {
		Consumer<Integer> value = (a) -> System.out.println(a*3);
		value.accept(5);
	}
}


19. What is the output of the following code?
public class Java8 {
	public static void main(String[] args) {
		Consumer<String> value = (a) -> System.out.println("Naresh I Technologies");
		value.accept("");
	}
}
Answer:
Naresh I Technologies

20. What is the output of the following code?
public class Java8 {
	public static void main(String[] args) {
		Consumer<String> value = (a) -> System.out.println(a.toLowerCase());
		value.accept("NareshIT");
	}
}
