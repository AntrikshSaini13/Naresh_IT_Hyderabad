01-04-2024
-----------
Program that describes two threads will book the ticket so, multithreading is not good 
in all the situations.

package com.ravi.thread_demo;

class Customer implements Runnable
{
    private int availableSeat = 1;
    private int wantedSeat;
    
    public Customer(int wantedSeat)
    {
    	this.wantedSeat = wantedSeat;
    }
    
	@Override
	public void run() 
	{
		String name = null;
	    
		//t1   t2
		
		if(availableSeat >= wantedSeat)
		{
			name = Thread.currentThread().getName();
			System.out.println(wantedSeat + " seat booked for :"+name);
			availableSeat = availableSeat - wantedSeat;
		}
		else
		{
			name = Thread.currentThread().getName();
			System.err.println("Sorry "+name+" seat is not available");
		}			
	}	
}

public class RailwayReservation {

	
	public static void main(String[] args) 
	{
		Customer c1 = new Customer(1);
		
		Thread t1 = new Thread(c1, "Person1");
		Thread t2 = new Thread(c1, "Person2");
		
		t1.start();  t2.start();
		
		

	}

}
----------------------------------------------------------------
package com.ravi.advanced;

class MyThread implements Runnable
{
	private String str;
	
	public MyThread(String str)
	{
		this.str=str;
	}	
	
	@Override
	public void run()
	{
		for(int i=1; i<=10; i++)
		{
			System.out.println(str+ " : "+i);
			try
			{
				Thread.sleep(100);
			}
			catch (Exception e)
			{
			System.err.println(e);
			}
		}
	}
}
public class Theatre
{
	public static void main(String [] args)
	{
		MyThread obj1 = new MyThread("sell the Ticket");  
		MyThread obj2 = new MyThread("Allocate the Seat"); 

		Thread t1 = new Thread(obj1);
		Thread t2 = new Thread(obj2);

		t1.start();
		t2.start();
	}
}
----------------------------------------------------------------
* Synchronization :
------------------
In order to solve the problem of multithreading java software people has introduced 
synchronization concept.

In order to acheive synchronization in java we have a keyword called "synchronized".

It is a technique through which we can control multiple threads but accepting only 
one thread at all the time.

Synchronization allows only one thread to enter inside the synchronized area for a 
single object.

Synchronization can be divided into two categories :-

1) Method level synchronization

2) Block level synchronization

1) Method level synchronization :-
-----------------------------------
In method level synchronization, the entire method gets synchronized so all the thread 
will wait at method level and only one thread will enter inside the synchronized area as 
shown in the diagram.(01-APR-24)
----------------------------------------------------------------
2) Block level synchronization
-------------------------------
In block level synchronization the entire method does not get synchronized, only the part 
of the method gets synchronized so all the thread will enter inside the method but only one 
thread will enter inside the synchronized block as shown in the diagram (01-APR-24) 

Note :- In between method level synchronization and block level synchronization, block level 
synchronization is more preferable because all the threads can enter inside the method so only 
the PART OF THE METHOD GETS synchronized so only one thread will enter inside the synchronized block.
-----------------------------------------------------------------
How synchronization logic controls multiple threads ?
------------------------------------------------------
Every Object has a lock(monitor) in java environment and this lock can be given to only 
one Thread at a time.

The thread who acquires the lock from the object will enter inside the synchronized area, 
it will complete its task without any disturbance because at a time there will be only one 
thread inside the synchronized area(for single Object). *This is known as Thread-safety in java.

The thread which is inside the synchronized area, after completion of its task while going 
back will release the lock so the other threads (which are waiting outside for the lock) 
will get a chance to enter inside the synchronized area by again taking the lock from the 
object and submitting it to the synchronization mechanism.
This is how synchronization mechanism controls multiple Threads.

Note :- Synchronization logic can be done by senior programmers in the real time industry 
        because due to poor synchronization there may be chance of getting deadlock.
----------------------------------------------------------------
Program on Method Level Synchronization :
-----------------------------------------
package com.ravi.thread_demo;

class Table
{
	public synchronized void printTable(int num) 
	{
		for(int i=1; i<=10; i++)
		{
			System.out.println(num+" X "+i+" = "+(num*i));
			try 
			{
				Thread.sleep(1000);
			} 
			catch (InterruptedException e) 
			{
				e.printStackTrace();
			}
		}
		System.out.println("..............");
	}
}


public class MethodLevelSynchronization {

	public static void main(String[] args) 
	{
		
		Table obj = new Table();  //lock is created here
		
		
		new Thread()
		{
		  @Override
		  public void run()
		  {
			obj.printTable(5);	
		  }		
			
		}.start();
		
		
		new Thread()
		{
		  @Override
		  public void run()
		  {
			obj.printTable(10);	
		  }		
			
		}.start();

	}

}