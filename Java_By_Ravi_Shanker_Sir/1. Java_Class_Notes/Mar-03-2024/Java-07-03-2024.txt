07-03-2024
----------
The main purpose of Exception Handling to provide user-friendly message to the client.

package com.ravi.exception;

import java.util.Scanner;

public class CustomerDemo 
{
	public static void main(String[] args) 
	{
	  System.out.println("Welcome User, Welcome Here!!!");
	  Scanner sc = new Scanner(System.in);
	  
	  try
	  {
		  System.out.print("Enter the value of x :");
		  int x = sc.nextInt();
		  
		  System.out.print("Enter the value of y :");
		  int y = sc.nextInt();
		  
		  int res = x /y;
		  System.out.println("Result is :"+res);
		  
	  }
	  catch(Exception e)
	  {
		System.err.println("Please don't put zero");  
	  }
	  sc.close();
	  System.out.println("Thank you for visiting application");
	}
}
------------------------------------------------------------------
Throwable class method :
------------------------
Throwable class has provided the following three methods :

1) public String getMessage() :- It will provide only error message.

2) public void printStackTrace() :-  It will provide the complete details regarding 
exception like exception class name(Fully Qualifield Name of Class), exception message, exception class location, 
exception method name and exception line number.

3) public String toString() :- It will convert the exception into
                               String representation using toString() method.
------------------------------------------------------------------
package com.ravi.basic;

public class PrintStackTrace 
{
	public static void main(String[] args) 
	{
		System.out.println("Main method started...");		
		try
		{
			String x = "Ravi";
			int y = Integer.parseInt(x); 
			System.out.println(y);	
		}
		catch(Exception e)
		{
			e.printStackTrace(); //For complete Exception details
			System.out.println("---------------------------");
			System.out.println("............................");
			System.out.println(e.getMessage()); //only for Exception message	
			System.out.println("..............");
			System.out.println(e.toString());
		}
		System.out.println("Main method ended...");		

	}

}
-------------------------------------------------------------------
Working with Specific Exception :
---------------------------------
While working with exception, in the corresponding catch block we can take Exception 
(super class) which can handle any type of Exception.

On the other hand we can also take specific type of exception (ArithmetiException, 
NullPointerException and so on) which will handle only one type i.e specific type of 
exception.
-------------------------------------------------------------------
package com.ravi.basic;

import java.util.InputMismatchException;
import java.util.Scanner;

public class SpecificException 
{
	public static void main(String[] args) 
	{
		System.out.println("Main started");
		
		Scanner sc = new Scanner(System.in);
		
		try
		{			
			System.out.print("Enter your Roll :");
			int roll = sc.nextInt();
			System.out.println("Your Roll is :"+roll);
		}
		catch(InputMismatchException e)
		{
			System.err.println("Input is not in proper format");
		}
		sc.close();
		System.out.println("Main ended");
	}
}
-------------------------------------------------------------------
package com.ravi.basic;

public class SpecificException1 
{
	public static void main(String[] args)
	{
		try
		{
			throw new OutOfMemoryError();
		}
		catch(Exception e)  //Throwable is read
		{
			System.out.println("Inside catch block");
			System.out.println(e);
			
		}
	}

}

Note : Here catch block will not be executed because Exception class can handle only 
Exception but not Error.


package com.ravi.basic;

public class SpecificException1 
{
	public static void main(String[] args)
	{
		try
		{
			throw new OutOfMemoryError();
		}
		catch(Throwable e)  
		{
			System.out.println("Inside catch block");
			System.out.println(e);
			
		}
	}

}
-----------------------------------------------------------------
Working with Infinity and Not a number(NaN) :
---------------------------------------------
10/0    -> Infinity (Java.lang.ArithmeticException)
10/0.0  -> Infinity  (POITIVE_INFINITY)

0/0     -> Undefined (Java.lang.ArithmeticException)
0/0.0   -> Undefined  (NaN)


While working with Integral literal in both the cases i.e Infinity (10/0) and 
Undefined (0/0) we will get java.lang.ArithmeticException because java software 
people has not provided any final, static variable support to deal with Infinity 
and Undefined.

On the other hand while working with floating point literal in the both cases i.e 
Infinity (10/0.0) and Undefined (0/0.0) we have final, static variable support so 
the program will not be terminated in the middle which are as follows

10/0.0 = POSITIVE_INFINITY
-10/0.0 = NEGATIVE_INFINITY
0/0.0 = NaN

package com.ravi.basic;

public class InfinityFloatingPoint 
{
	public static void main(String[] args) 
	{
	   System.out.println("Main Started");
	   System.out.println(10/0.0); 
	   System.out.println(-10/0.0); 
	   System.out.println(0/0.0);   
	   System.out.println(10/0); 
	   System.out.println("Main Ended");
	}

}
------------------------------------------------------------------
