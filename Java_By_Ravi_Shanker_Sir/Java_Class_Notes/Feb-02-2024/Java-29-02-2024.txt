29-02-2024
----------
How many ways we can load the .class file into JVM memory :
----------------------------------------------------------------
There are multiple ways to load the .class file into JVM memory.The following are the common examples :-

1) By using java tools [java command]
2) By using Constructor [Object creation]
3) By accessing the static member of the class.
4) By using Inheritance
5) By Reflection API


1) By using Java tools 
    javac Test.java 
    java Test [Load the Test.class file into JVM memoy]

 
2) By using Constructor [Object creation]

3) By Calling static variable and static method using class name.

class Demo
{
	static int x = 10;
	static
	{
		System.out.println("Static Block of Demo class Executed!!! :"+x);
	}
}
public class ClassLoading 
{
	public static void main(String[] args) 
	{	
		//new Demo();
	  System.out.println(Demo.x);	
	}
}
---------------------------------------------------------------
4) By Using Inheritance
----------------------------   
When we create the Object for Sub class then, first of all super class .class file will be loaded then only sub class .class file will be loaded.

Note :- Always Object is the first class to be loaded into JVM memory

class Alpha
{
	static
	{
		System.out.println("Static Block of super class Alpha!!");
	}
}
class Beta extends Alpha 
{
	static
	{
		System.out.println("Static Block of Sub class Beta!!");
	}
}
class InheritanceLoading 
{
	public static void main(String[] args) 
	{
		 new Beta();
	}
}
----------------------------------------------------------------

5) By Reflection API (Explicit class loading)
-----------------------------------------------

Java software people has provided a predefined class called "Class" available in java.lang package.

This class called Class contains a predefined static method forName(String className), through which we can load the required .class file into JVM memory dynamically.

It throws a checked exception i.e java.lang.ClassNotFoundException

Class.forName("com.ravi.Test");  //Fully Qualified Name
----------------------------------------------------------------
package com.ravi.class_loading;

class Demo
{
	static
	{
		System.out.println("Static Block of Demo class");
	}
}

public class ClassLoader {

	public static void main(String[] args) throws Exception
	{
		Class.forName("com.ravi.class_loading.Demo");

	}

}
----------------------------------------------------------------
What is factory Method in java ?
--------------------------------
The method which returns the class name itself by creating the object for that particular class is called Factory Method.

Class cls = Class.forName("com.ravi.Test");

Here Test.class will be loaded into JVM memory and it will return Class class object so further we can call any method of 
java.lang.Class class.

public class FactoryMethod {

	public static void main(String[] args) throws Exception
	{
		Class name = Class.forName("java.lang.String");
		System.out.println(name.getName());

	}

}

Any method which is returning the class object then it is known as Factory Method.
---------------------------------------------------------------
*What is the limitation of 'new' keyword ?
                       OR
What is the difference between new keyword and newInstance() method?
                      OR
How to create the Object for the classes which are coming dynamically from the database or from some file.

The limitation with new keyword is, It demands the class name at the begning or at the time of compilation so new keyword is not suitable to create the object for the classes which are coming from database or files at runtime.

In order to create the object for the classes which are coming at runtime from database or files, we should use newInstance() method available in java.lang.Class class.
---------------------------------------------------------------
class Student
{
}
public class Test 
{
	public static void main(String[] args) throws Exception
	{
	   Object obj = Class.forName(args[0]).newInstance();
	   System.out.println("Object created for :"+obj.getClass().getName());
	}
}

javac Test.java
java Test Student (Here Student class we are passing through Command Line Argument)
----------------------------------------------------------------
class Student
{
	public void greet()
	{
		System.out.println("Welcome Student");
	}
}
public class Test 
{
	public static void main(String[] args) throws Exception
	{
	   Object obj = Class.forName(args[0]).newInstance();
	   Student s1 = (Student) obj;
	   s1.greet();
	 
	}
}

Here Student class object is created so we can call greet() non static method of Student class.
----------------------------------------------------------------
* What is the difference between java.lang.ClassNotFoundException and java.lang.NoClassDefFoundError :
