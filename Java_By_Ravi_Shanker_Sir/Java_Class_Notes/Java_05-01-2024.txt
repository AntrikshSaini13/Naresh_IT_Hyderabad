.------------------------------------------------------------------------
05-01-\2024
----------
Constructor :
-------------
If the name of the class and name of the method both are exactly same and, It should not contain any return type then it is called Constructor.

*The main purpose of constructor to initialize the instance variable of the class. (Initializing the object)

Every class must contain at least one constructor either added by compiler (default constructor) or written by user.

The access modifier of default constructor depends upon the access modifier of the class.

Explicitly, a constructor never containing any return type including void also but implicitly it returns current class object (this keyword)
as shown in the program 

package com.nit.interface_demo;

public class Test 
{
	public Test()
	{		
	}
	
	public String accept()
	{
		System.out.println("Accept");
		return "india";
	}

	public static void main(String[] args) 
	{
	   String x =  new Test().accept();	
	   System.out.println(x);
	}

}

A constructor may contain return keyword but not return keyword with value.

public class Test 
{
	public Test()
	{
	  return ;   //valid	
	}

	public static void main(String[] args) 
	{
		 Test t1 = new Test();
	}
}

A constructor is automatically called and executed at the time of creating the object.

public class Demo
{
   public Demo()
    {
    }
}

Demo d1 = new Demo(); //Here only Constructor will only
     d1.Demo(); //Not required
   
A constructor is called once per object that means if we create two objects then constructor will be called 2 times.
-----------------------------------------------------------------------
Types Of Constructor :
-----------------------
Constructors are of 3 types :

1) Default Constructor.
2) No Argument OR Parameter less OR Non Parameterized OR Zero Argument
   Constrcutor.
3) Parameterized Constructor.


1) Default Constructor :
------------------------
The constructor added by compiler to help java programmer to craete the object is called Default constructor.

Student.java
-------------
public class Student
{
}

javac Student.java (Compilation)

Student.class
-------------
public class Student
{
   public Student() //default Constructor added by compiler
   {
   }
}
-----------------------------------------------------------------------
2) No Argument Constructor :
----------------------------
A constructor written by user without parameter is called as No Argument constructor.
Default constructor and no argument constructor looks like same but default menas added by compiler and no argument written by user.

public class Employee
{
   private int employeeNumber;
   Employee() //No Argument Constructor
   {
     employeeNumber = 123;
   }
}

In this no argument approach, all the objects will be initialized with same value so it is not a recommended way because all objects must contain different value.

Person.java
------------
package com.ravi.constructor;

public class Person 
{
  private int personId;
  private String personName;
  
  public Person() //No Argument Constructor
  {
	  super();
	  personId = 111;
	  personName = "Scott";
  }

	@Override
	public String toString() {
		return "Person [personId=" + personId + ", personName=" + personName + "]";
	}  
  
}


NoArgumentConstructor.java
--------------------------
package com.ravi.constructor;

public class NoArgumentConstructor {

	public static void main(String[] args) 
	{
		Person scott = new Person();
		System.out.println(scott);
		
		Person smith = new Person();
		System.out.println(smith);

	}

}

In the above program we have two objects scott and smith but both the objects are initialized with scott data which is not recommended so we 
introduced parameterized constructor.
-----------------------------------------------------------------------
Parameterized Constructor :
---------------------------
If we pass one or more argument to the constructor then it is called parameterized constructor. By using parameterized constructor we can initialize all our objects with different value.

public class Customer
{
   int cid;
   String cname;

   public Customer(int cid, String cname) //Parameterized Constructor
   {
    this.cid = cid;
    this.cname = cname;
   }
}

2 Files :
-----------
Dog.java
--------
package com.ravi.parameterized_constructor;

public class Dog 
{
  private String dogName;
  private double dogHeight;
  private int dogAge;
  private String dogColor;
  
	public Dog(String dogName, double dogHeight, int dogAge, String dogColor) {
		super();
		this.dogName = dogName;
		this.dogHeight = dogHeight;
		this.dogAge = dogAge;
		this.dogColor = dogColor;
	}

	@Override
	public String toString() {
		return "Dog [dogName=" + dogName + ", dogHeight=" + dogHeight + ", dogAge=" + dogAge + ", dogColor=" + dogColor
				+ "]";
	} 
  
}

ParameterizedConstructor.java
------------------------------
package com.ravi.parameterized_constructor;

public class ParameterizedConstructor {

	public static void main(String[] args) 
	{
	  Dog tiger = new Dog("Tiger", 3.4, 5, "Grey");
	  System.out.println(tiger);
	  
	  Dog tommy = new Dog("Tommy", 2.4, 3, "Black");
	  System.out.println(tommy);

	}

}
----------------------------------------------------------------------
How to write setter and getter in java :
----------------------------------------
Setter :- To modify the existing object data.

getter :- To read the private data outside of the class.

public class Student 
{
    private int roll;
    private String name;  

   public void setRoll(int roll)
   {
     this.roll = roll;
   }

   public int getRoll()
   {
      return this.roll;
   }

}
----------------------------------------------------------------------
Program on setter and getter :
-------------------------------
2 Files :
Student.java
------------
package com.ravi.parameterized_constructor;

public class Student 
{
    private int roll;

	public int getRoll() //getter
	{
		return this.roll;
	}
	
	public void setRoll(int roll) //setter
	{
		this.roll = roll;
	}
   
   
}

SetterAndGetter.java
--------------------
package com.ravi.parameterized_constructor;

public class SetterAndGetter {

	public static void main(String[] args) 
	{
		Student s1 = new Student();
		s1.setRoll(111);
		System.out.println("Roll Number is :"+s1.getRoll());
	}

}
----------------------------------------------------------------------