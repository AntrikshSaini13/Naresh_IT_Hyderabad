15-02-2024
-----------
interface upto java 1.7
------------------------
An interface is a keyword in java which is similar to a class.

Upto JDK 1.7 an interfcae contains only abstract method that means there is a 
guarantee that inside an interfcae we don't have (concrete or general or instance 
methods).

From java 8 onwards we have a facility to write default and static methods.

By using interface we can achieve 100% abstraction concept because it contains 
only abstract methods.

In order to implement the member of an interface, java software people has provided 
implements keyword.

All the methods declared inside an interface is by default public and abstract so at 
the time of overriding we should apply "public" access modifier to sub class method.

All the variables declared inside an interface is by "default public, static and final".

We should override all the abstract methods of interface to the sub classes otherwise 
the sub class will become as an abstract class hence object can't be created.

We can't create an object for interface, but reference can be created.

By using interfcae we can acheive multiple inheritance in java.

We can achieve loose coupling using inetrface.

Note :- inside an interface we can't declare any blocks (instance, static), instance 
variables (No properties) as well as we can't write constructor inside an interface.
-----------------------------------------------------------------
3 Files :
---------
Moveable.java(I)
----------------
package com.ravi.interface_demo;

public interface Moveable 
{
   int SPEED = 100; //public + static + final
   void move();  //public + abstract
}


Car.java(C)
-----------
package com.ravi.interface_demo;

public class Car implements Moveable
{
	@Override
	public void move() 
	{
		//SPEED = 120;	//Invalid	
		System.out.println("Car speed is :"+SPEED);
	}

}


Main.java(C)
------------
package com.ravi.interface_demo;

public class Main {

	public static void main(String[] args) 
	{
		Moveable m = new Car();
		m.move();
		System.out.println(Moveable.SPEED);

	}

}
-----------------------------------------------------------------
package com.ravi.pack_inter;

import java.util.Scanner;

interface Bank
{
	public void deposit(int amount);
	public void withdraw(int amount);
}

class Customer implements Bank
{
    private double balance = 10000;
    
	@Override
	public void deposit(int amount) 
	{
		if(amount < 0)
		{
			System.err.println("Can't be deposited");
		}
		else
		{
			balance = balance + amount;
			System.out.println("After deposit :"+balance);
		}
	}

	@Override
	public void withdraw(int amount) 
	{
		if(amount < balance)
		{
		 balance = balance - amount;
		 System.out.println("Balance after withdraw :"+balance);
		}
		else
		{
			System.err.println("Insufficient Balance ");
		}
		
	}	
}

public class BankApplication 
{
	public static void main(String[] args) 
	{
		Customer c1 = new Customer();
		
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the amount u want to deposit :");
		int dep = sc.nextInt();
		c1.deposit(dep);
		
		System.out.print("Enter the amount u want to withdraw :");
		int wit = sc.nextInt();
	    	c1.withdraw(wit);
		
		
	}

}
---------------------------------------------------------------
Assignment :
-------------
Take one interface Calculator which contains the following abstract methods :
  
     void doSum(int x, int y);
     void doSub(int x, int y);
     void doMul(int x, int y);

Take one class to implement all the abstract methods of Calculator interface.
