20-01-2024
-----------
Program on Single Level Inheritance :
-------------------------------------
3 files :
---------
Parent.java
-----------
package com.ravi.single_level_inheritance;

public class Parent 
{
  public void home()
  {
	  System.out.println("3 BHK Home");
  }
}


Child.java
----------
package com.ravi.single_level_inheritance;

public class Child extends Parent 
{
  public void car()
  {
	  System.out.println("Audi car");
  }
}


SingleLevelInheritance.java
---------------------------
package com.ravi.single_level_inheritance;

public class SingleLevelInheritance 
{
	public static void main(String[] args)
	{
		Child c = new Child();
		c.home(); //parent property 
		c.car();  //child property

	}

}
-----------------------------------------------------------------------
//Initializing the super class property through Inheritance :
-------------------------------------------------------------
ConstructorTest.java [Single File Approach]
----------------------------------------------
package com.ravi.single_level_inheritance;

class Super
{
   public Super()
   {
	 System.out.println("Super class Constructor");
   }
}
class Sub extends Super
{
   public Sub()
   {
	   System.out.println("Sub class Constructor");
   }
}

public class ConstructorTest 
{
	public static void main(String[] args) 
	{
		Sub s1 = new Sub();
		
	}
}

Output : - Super class Constructor
	   Sub class Constructor
------------------------------------------------------------------------
SingleLevelDemo.java [Single File Approach]
------------------------------------------
package com.ravi.single_level;

class Super
{
   int x, y;


	public Super(int x, int y) 
	{
		super();
		this.x = x;
		this.y = y;
	}  
}
class Sub extends Super
{
  public Sub()
  {
	  super(100,200);
  }


	@Override
    public String toString() 
	{
	return "Super [x=" + x + ", y=" + y + "]";
    }  
}

public class SingleLevelDemo 
{
  public static void main(String[] args) 
  {
	Sub s = new Sub();
	System.out.println(s);
  }
}
------------------------------------------------------------------------
SingleLevelInheritance.java
----------------------------
package com.ravi.single_level;

class Alpha
{
	private int x,y;
	
	public Alpha(int x, int y)
	{
		this.setX(x);
		this.setY(y);
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}
}
class Beta extends Alpha
{
	public Beta(int c, int d)
	{
		super(c,d);
	}
	
	public void show()
	{
		System.out.println("x value is :"+getX());
		System.out.println("y value is :"+getY());
	}
	
}

public class SingleLevelInheritance
{
	public static void main(String[] args)
	{
		new Beta(100,200).show();

	}

}
------------------------------------------------------------------------
Note :- While working with inheritance, private data member will not be available directly 
to the sub class, here we need to take the help of getter (Encapsulation).

If we want to make the data available to sub class then we should use
protected access modifier which is less restrictive than private.
------------------------------------------------------------------------
Program on Single level inheritance :
-------------------------------------
TemporaryEmployee
  |-employeeNumber
  |-employeeName
  |-employeeAddress
PermanentEmployee
  |-department
  |-designation

EmployeeDemo.java
------------------
package com.ravi.single_level;

class TemporaryEmployee
{
	protected int employeeNumber;
	protected String employeeName;
	protected String employeeAddress;
	
	public TemporaryEmployee(int employeeNumber, String employeeName, String employeeAddress) {
		super();
		this.employeeNumber = employeeNumber;
		this.employeeName = employeeName;
		this.employeeAddress = employeeAddress;
	}
}
class PermanentEmployee extends TemporaryEmployee
{
	protected String department;
	protected String designation;
	
	public PermanentEmployee(int employeeNumber, String employeeName, String employeeAddress, String department,
			String designation) {
		super(employeeNumber, employeeName, employeeAddress);
		this.department = department;
		this.designation = designation;
	}

	@Override
	public String toString() {
		return "PermanentEmployee [department=" + department + ", designation=" + designation + ", employeeNumber="
				+ employeeNumber + ", employeeName=" + employeeName + ", employeeAddress=" + employeeAddress + "]";
	}

}

public class EmployeeDemo 
{
	public static void main(String[] args) 
	{
		PermanentEmployee p = new PermanentEmployee(1, "Rohit", "Mumbai", "Cricket", "Batter");
		System.out.println(p);
	}

}
------------------------------------------------------------------------
