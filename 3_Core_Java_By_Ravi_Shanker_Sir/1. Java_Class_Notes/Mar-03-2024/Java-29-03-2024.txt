29-03-2024
-----------
Program to assign different targets by using different threads :
----------------------------------------------------------------
package com.ravi.thread;

class UserThread implements Runnable
{
	@Override
	public void run() 
	{
		Thread t = Thread.currentThread();
		System.out.println(t.getName());
		System.out.println(t.getId());
	}	
}

public class RunnableDemo 
{
	public static void main(String[] args) 
	{
		Thread t = Thread.currentThread();
		System.out.println(t.getName());
		System.out.println(t.getId());
		
		Thread tn = new Thread(new UserThread(),"Child1");
		
		tn.start();
		
				
		Thread t1 = new Thread(new Ravi(),"Ravi");
		t1.start();

		Thread t2 = new Thread(new Rahul(),"Rahul");
		t2.start();
	}

}

class Ravi implements Runnable
{

	@Override
	public void run() 
	{
		Thread t = Thread.currentThread();
		System.out.println(t.getName());
		System.out.println(t.getId());
		
	}
	
}

class Rahul implements Runnable
{
	@Override
	public void run() 
	{
		Thread t = Thread.currentThread();
		System.out.println(t.getName());
		System.out.println(t.getId());
		
	}
	
}

public long getId() :- It will a unique positive integer id for each and every thread, 
it is used to identify the thread during the life cycle of the Thread.
------------------------------------------------------------------
Working with Anonymous Approach :
----------------------------------
Case 1: Creating Anonymous Thread class using reference :
----------------------------------------------------------
package com.ravi.thread;

public class AnonymousThreadWithRef 
{
	public static void main(String[] args) 
	{
		//Anonymous inner class
		Thread t1 = new Thread() // thread is class of java.lang package not need to import the class
		{
			@Override
			public void run()
			{
				Thread t = Thread.currentThread();
				System.out.println(t.getName());
				System.out.println(t.getId());
			}
		};
        	t1.start();
	}

}
----------------------------------------------------------------
Case 2: Creating Anonymous Thread class without reference :
----------------------------------------------------------
package com.ravi.thread;

public class AnonymousThreadWithoutRef {

	public static void main(String[] args) 
	{
	   new Thread()
	   {
		   @Override
			public void run()
			{
				Thread t = Thread.currentThread();
				System.out.println(t.getName());
				System.out.println(t.getId());
			}  
	   }.start();

	}

}
-----------------------------------------------------------------
Case 3 : Creating Thread with Anonymous approach using Runnable

package com.ravi.thread;

public class AnonymousRunnable {

	public static void main(String[] args) 
	{
		Runnable r1 = new Runnable()
		{
			@Override
			public void run()
			{
				Thread t = Thread.currentThread();
				System.out.println(t.getName());
				System.out.println(t.getId());
			}  
	   	};
	    	Thread t1 = new Thread(r1);
	    	t1.start();
		

	}

}
-----------------------------------------------------------------
Case 4 :- Runnable by using Lambda

package com.ravi.thread;

public class RunnableUsingLambda {

	public static void main(String[] args)
	{
		Runnable r1 = () ->
		{
			Thread t = Thread.currentThread();
			System.out.println(t.getName());
			System.out.println(t.getId());
		};			
				
	    	Thread t1 = new Thread(r1);
	    	t1.start();

	}

}
-----------------------------------------------------------------
Case 5 : Writing Lambda in the Constructor of Thread.

package com.ravi.thread;

public class ThreadWithLambda {

	public static void main(String[] args) throws InterruptedException
	{
	new Thread(()-> 
	{
		for(int i=1; i<=100; i=i+2)
		{
			String name = Thread.currentThread().getName();
			System.out.println(i+" by "+name);
		}

	},"Thread1").start();
	
	Thread.sleep(1000);
	System.out.println("............");
	new Thread(()-> 
	{
		for(int i=2; i<=100; i=i+2)
		{
		String name = Thread.currentThread().getName();
			System.out.println(i+" by "+name);
		}	

	},"Thread2").start();
  }
}
------------------------------------------------------------------
IQ :
----
In between extends Thread and implements Runnable which one is 
better and why ?

*In between extends Thread and implements Runnable, which one is better and why?

In between extends Thread and implements Runnable approach, implements Runnable 
is more better due to the following reasons

1) When we use extends Thread, all the methods and properties of Thread class is 
available to sub class so it is heavy weight but this is not the case while implementing 
Runnable interface.

2) As we know Java does not support multiple inheritance using classes so in the extends 
Thread approach we can't extend another class but if we use implments Runnable interface 
still we have chance to extend another class(Only one class) and we can also implement one 
or more interfaces.

3) implements Runnable is a better approach to create multiple threads on a single sub class object.

4) We can implement Lambda for Runnable interface (Functional interface) only but not for Thread class.





