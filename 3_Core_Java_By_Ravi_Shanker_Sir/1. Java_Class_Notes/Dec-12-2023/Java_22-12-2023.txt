22-12-2023
----------
// Converting from decimal to another number system
public class Test12 
{
      public static void main(String[] argv) 
      {
		   //decimal to Binary
           System.out.println(Integer.toBinaryString(5)); //101

		   //decimal to Octal  
           System.out.println(Integer.toOctalString(15)); //17

		   //decimal to Hexadecimal
           System.out.println(Integer.toHexString(2781)); //add 
      }
}
--------------------------------------------------------------------------
//var keyword [Introduced from java 10]
public class Test13 
{
	public static void main(String[] args) 
	{
		   var x = 12;
		   System.out.println(x);		   
	}
}
--------------------------------------------------------------------------
floating point literal :
------------------------
1) Any numeric literal, if contains decimal or fraction then it is called 
floating point literal.

Example :- 67.89, 78.23, 90.90

2) In floating point literal we have 2 data types :
     a) float (32 bits)
     b) double (64 bits)

3) By default every floating point literal is of type double only so the 
following statement will generate compilation error
            
	     float f = 2.3; //Invalid 

Now, we have 3 solutions 

              float f1 = 2.3f;
	      float f2 = 2.3F;
              float f3 = (float) 7.8;
  
4) Even though, every floating point literal is of type double only but in order 
to enhance the readability of the code, java software people has
provided two flavors to represent double literal explicitly.

               double d1 = 2.3D;
	       double d2 = 2.5d;

*5) While working with integral literal, we can represent integral literal in 
4 different forms i.e. decimal, octal, hexadecimal and binary but in 
   floating point literal we have only one form i.e decimal.

*6) We can assign integral literal to floating point literal but floating 
point literal we cannot assign to integral literal.

7) We can represent floating point literal in exponent form.

   Example :- 15e2              
	      15 X 10 X 10 (10 to the power 2)
--------------------------------------------------------------------------
public class Test 
{
	public static void main(String[] args) 
	{
		float f = 2.0; //error
		System.out.println(f);				
	}
}
-------------------------------------------------------------------------
public class Test1 
{
	public static void main(String[] args) 
	{
		//float a = 1.0; 
		float b = 15.29F;
		float c = 15.25f;
		float d = (float) 15.25;

		System.out.println(b+" : "+c+" : "+d);
       
	}
}
-------------------------------------------------------------------------
public class Test2 
{
	public static void main(String[] args) 
	{
		double d = 15.15;
		double e = 15.15d;
		double f = 15.15D;
		
		System.out.println(d+" , "+e+" , "+f);
	}
}
-------------------------------------------------------------------------
public class Test3 
{
	public static void main(String[] args) 
	{
		 double x = 0129.89;  

		 double y = 0167;

		 double z = 0178; //error

		System.out.println(x+","+y+","+z);
	}
}
-------------------------------------------------------------------------
class Test4 
{
	public static void main(String[] args) 
	{
		double x = 0X29;  

		double y = 0X9.15; //error
		
		System.out.println(x+","+y);
	}
}
------------------------------------------------------------------------
public class Test5 
{
	public static void main(String[] args) 
	{
		double d1 = 15e-3;
		System.out.println("d1 value is :"+d1);		

		double d2 = 15e3;
		System.out.println("d2 value is :"+d2);	
		
		
	}
}
-------------------------------------------------------------------------
public class Test6 
{
	public static void main(String[] args) 
	{
		double a = 0791; 

		double b = 0791.0; 

		double c = 0777;  

		double d = 0Xdead;  
		
		double e = 0Xdead.0; 
	}
}
-------------------------------------------------------------------------
public class Test7 
{
	public static void main(String[] args) 
	{
	   double a = 1.5e3;
	   float b = 1.5e3; //E 
	   float c = 1.5e3F; 	   
	   double d = 10; 	   
	   int e = 10.0;  //E
	   long f = 10D; //E
	   int g = 10F; //E  
	   long l = 12.78F; //E 
	}
}
-------------------------------------------------------------------------
//Range and size of floating point literal 
public class Test8 
{
	public static void main(String[] args)    
	{
		System.out.println("\n Float range:");
		System.out.println(" min: " + Float.MIN_VALUE);
		System.out.println(" max: " + Float.MAX_VALUE); 
		System.out.println(" size :"+Float.SIZE);

		System.out.println("\n Double range:");
		System.out.println(" min: " + Double.MIN_VALUE);
		System.out.println(" max: " + Double.MAX_VALUE);
		System.out.println(" size :"+Double.SIZE);
	}
} 
------------------------------------------------------------------------
Boolean Literal :
----------------
It is used to represent two states either true or false.

In boolean literal we have only one data type i.e boolean data type which 
accepts 1 bit of memory as well as it also depends on JVM implementation.

Unlike C and C++, we cannot assign 0 and 1 to boolean data type because 
in java any number without decimal is treated as integral literal

        boolean isEmpty = 0; [Invalid in Java but valid in C and C++]


We cannot assign String to boolean type as shown below.

         boolean isValid = "true"; //Invalid
------------------------------------------------------------------------
public class Test1
{
    public static void main(String[] args)
    {
        boolean isValid = true;   
        boolean isEmpty = false;
		
        System.out.println(isValid);
        System.out.println(isEmpty);
     }
}
-----------------------------------------------------------------------
public class Test2
{
    public static void main(String[] args)
    {
	boolean c = 0; //error
        boolean d = 1; //error
        System.out.println(c);
        System.out.println(d);       
    }
}
------------------------------------------------------------------------
public class Test3 
{
	public static void main(String[] args) 
	{
		boolean x = "true";  //error
		boolean y = "false";  //error
		System.out.println(x);
                System.out.println(y); 
	}
}
------------------------------------------------------------------------
