12-01-2024
-----------
Heap and Stack Diagram for Employee.java
-----------------------------------------
public class Employee
{
	int id = 100;

	public static void main(String[] args) 
	{
		int val = 200;

		Employee e1 = new Employee();     

		e1.id = val;

		update(e1);	  
		
		System.out.println(e1.id);

        Employee e2 = new Employee(); 

		e2.id = 500;
        
		switchEmployees(e2,e1);	//3000x and 1000x

		    //GC [2 objects are eligible 4 GC i.e 2000x and 4000x]

			System.out.println(e1.id);
		    System.out.println(e2.id);
	    } 
		
	 public static void update(Employee e)  
	 {
        e.id = 500;
		e = new Employee();
		e.id = 400;
	 }

	 public static void switchEmployees(Employee e1, Employee e2)
	  {
		 int temp = e1.id;
		 e1.id = e2.id; //500 
		 e2 = new Employee();
		 e2.id = temp;
	  }
   }
-------------------------------------------------------------------------
*Why local and Parameter variables we cannot access outside of the method?

Local and parameter variables are the part of Stack Frame (Inside stack Memory), 
both the variables will be executed inside the frame only and once the method 
execution is over. It will be deleted from stack frame hence the scope of these 
variables will be inside that method frame only.

That is the reasin we cannot access local and Parameter variables outside of 
the method as shown in the program.

Test.java
----------
package com.ravi.method_parameter_local;

public class Test {

	public static void main(String[] args) 
	{
		System.out.println("Main method Started");
		m1();
		System.out.println("Main method Ended");
	}

	public static void m1()
	{
        System.out.println("M1 method Started");
		m2();
		System.out.println("M1 method Ended ");
	}
	
	public static void m2()
	{
		int x = 100;
		System.out.println("M2 Method is executed :"+x);
	}
	
}
-------------------------------------------------------------------------
The JVM Architecture is divided into 3 sections

1) Class Loader sub system (Here all the static members are executed)

2) Runtime Data Areas (Memory Areas)
    a) Method Area (Class Information)
    b) HEAP Area (Object and its related Information)
    c) Stack Area (Methods and its related information)
    d) PC Register (Current Thread Execution)
    e) Native Method Stack (Native Stack Exceution)

3) Execution Engine
   Interpreter (Slow in nature) + JIT Compiler 
--------------------------------------------------------------------------
HEAP and STACK Diagram for Beta.java
-------------------------------------
class Alpha
{
	int val;
	static int sval = 200;
	static Beta b = new Beta();

	public Alpha(int val)
	{
      this.val = val;
	}
}

public class Beta  
{
	public static void main(String[] args) 
	{
		Alpha am1 = new Alpha(9);
		Alpha am2 = new Alpha(2);

		Alpha []ar = fill(am1, am2);  

		ar[0] = am1; 
        System.out.println(ar[0].val); 
        System.out.println(ar[1].val);
	}

	public static Alpha[] fill(Alpha a1, Alpha a2)
	{
		a1.val = 15;

        Alpha fa[] = new Alpha[]{a2, a1};

		return fa;
	}
}
--------------------------------------------------------------------------