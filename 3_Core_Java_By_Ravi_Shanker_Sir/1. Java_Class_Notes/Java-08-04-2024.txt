08-04-2024
----------
public String substring(int startIndex) :-

public String substring(int startIndex, int endIndex) :-
-------------------------------------------------------------
It is a predefined method available in the String class. The main purpose of this method to extract the part of the specified string based on the index position.

In this method the startIndex starts from 0 whereas endIndex starts from 1.

Both index will be inclusive for extracting the value.

If end index will be less than start index then we will get an exception i.e StringIndexOutOfBoundsException  
substring(5,2);

If start index and end index both are equal, nothing will print.

Nither start index nor end index will accept (-ve) value otherwise StringIndexOutOfBoundsException.
---------------------------------------------------------------
public class Test12
{
	public static void main(String []  args) 
	{
        String x="HYDERABAD";		
		System.out.println(x.substring(2,7)); //DERAB

		System.out.println(x.substring(3)); //ERABAD

		System.out.println(x.substring(3,3)); 

         //java.lang.StringIndexOutOfBoundsException 
		 System.out.println(x.substring(6,3));

		//java.lang.StringIndexOutOfBoundsException 
		System.out.println(x.substring(6, -3));
	}
}

---------------------------------------------------------------
public String intern()  :
---------------------------
It is a predefined method available in the String class. The main purpose of this method to return canonical representation for the string object that means String interning ensures that all strings having the same contents use the same memory location.

//public String intern() 
//Returns the Canonical representation for the String object.
public class Test14
{
	public static void main(String args[])
	{
		     String s1 = new String("india");
			 String s2 = new String("india");
			 System.out.println(s1 == s2);

			 s1 = s1.intern();
			 s2 = s2.intern();
			 System.out.println(s1 == s2);


			 String s3 = "Hyd";
			 String s4 = new String("Hyd");
			 System.out.println(s3 == s4);
			 s4 = s4.intern();
			 System.out.println(s3 == s4); 

			 String s5 = s4.intern();
			 System.out.println(s3 == s5); 
	}
}


Note :- Java automatically interns the string literals but we can manually use the intern() method on String object created by new keyword so all the Strings which are having same content will get the same String and return the same memory address(Canonical representation for the String ).


From the above program it is clear that, All that String having same content will represent the same memory address so the hashcode value will be same as shown in the program below.

The following explains all the Strings having same content will provide 
same hashcode.

public class Demo 
{
	public static void main(String[] args) 
	{
		String s1 = "India";
		String s2 = new String("India");
		String s3 = new String("India");

		System.out.println(s1.hashCode()+" : "+s2.hashCode()+" : "+s3.hashCode());
		
	}

}
---------------------------------------------------------------
//IQ
public class Test15
{
	public static void main(String args[])
	{
		String x = "india"; //error
		System.out.println("it's length is :"+x.length);  

		String [] y = new String[10]; //error   
		System.out.println("it's length is :"+y.length()); 	
	}
}
---------------------------------------------------------------
//public boolean startsWith(String prefix)
//public boolean endsWith(String suffix)

Both the methods are available in String class. 

startsWith() is used to verify that the given String is Starting with prefix String or not, if yes it will return true otherwise it will return false.

endsWith() is used to verify that the given String is ending with suffix String or not, if yes it will return true otherwise it will return false.

Both the methods are case-sensitive.

Both methods take String as a  parameter and return type is boolean.

//public boolean startsWith(String prefix)
//public boolean endsWith(String suffix)

public class Test16
{
	 public static void main(String args[])
	{ 
		String s="Sachin Tendulkar";
		System.out.println(s.startsWith("Sa"));
		System.out.println(s.endsWith("r"));
	}
}
---------------------------------------------------------------
public int indexOf(String str) :-
---------------------------------
It is a predefined method available in the String class. The main purpose of this method to find out the index position of the specified String in the existing String.

It will serach the index position of the first occurrance of the specified String as a parameter.

It takes String as a parameter and return type of this method is int.

//public int indexOf(String x)
public class Test17
{
	 public static void main(String args[])
	{
		String  str = "India is my country and It is in Asia";
        int index = str.indexOf("is");
		System.out.println("First Occurrance of is :"+index); 
	}
}


public int lastIndexOf(String x) :-
--------------------------------------
It is a predefined method available in the String class. The main purpose of this method to find out the last index position of the Specified String in the existing String.

It will serach the index position of the last occurrance of the String.

It takes String as a parameter and return type of this method is int.
//public int lastIndexOf(String x)
public class Test18
{
	public static void main(String args[])
	 { 
         String s1 = "it is a nice city";    
		 int lastIndex = s1.lastIndexOf("it");
		System.out.println("Last occurrance of it, is :"+lastIndex+ "th position");
     }
}
---------------------------------------------------------------
//public String toUpperCase() :- converts to upper case letter
public class Test19
{
	public static void main(String args[])
	{
        String str = "india";
		System.out.println(str.toUpperCase());
    }
}
---------------------------------------------------------------
//public String toLowerCase()  converts to lower case.
public class Test20
{
	public static void main(String args[])
	{
		String str = "INDIA";
		System.out.println(str.toLowerCase());  //india
	}
}
---------------------------------------------------------------
public String trim() :- 
-------------------------
It is a predefined method available in the String class. The main purpose of this method to remove the white spaces from the begning (heading) and end (trailing) from the String.

It will not remove any white space in the between the String. The return type of this method is String.

//program on trim()  
public class Test21
{
public static void main(String args[])
	{
		String s1="   Tata    ";  
		System.out.println(s1+"Nagar"); //       Tata      Nagar     

        s1 = "          Hello       Data        ";
		System.out.println(s1.trim() +"Base"); //Hello    DataBase	

	}
}
---------------------------------------------------------------
    




