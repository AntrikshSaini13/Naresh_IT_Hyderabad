Ques - 1
----------------
 Bank Account Transactions

You are tasked with implementing a simple Java program that simulates bank account transactions. The program should include 
two custom exceptions: a checked exception (InvalidTransactionException) and an unchecked exception (InsufficientFunds
Exception). These exceptions will be used to handle different scenarios during  transactions and withdrawals.

* InvalidTransactionException (Checked Exception):
-> This exception should be thrown when a transaction is attempted with an invalid amount (non-positive) or when there are
 insufficient funds for the transaction.

*InsufficientFundsException (Unchecked Exception):
-> This exception should be thrown when a withdrawal is attempted with an amount exceeding the account balance.


* BankAccount Class:

-> The class should have a private instance variable balance representing the account balance.
-> It should include a constructor to initialize the initial balance.
-> Implement a method performTransaction(double amount) that performs a transaction, throwing InvalidTransactionException for invalid amounts or insufficient funds.
Implement a method withdraw(double amount) that simulates a withdrawal, throwing InsufficientFundsException for insufficient
funds and handling IllegalArgumentException for invalid withdrawal amounts.

* Main Class (BankAccountScenario):

-> In the main method, create an instance of BankAccount with an initial balance of 1000.
-> Demonstrate the use of performTransaction for valid and invalid transactions, handling the InvalidTransactionException.
-> Demonstrate the use of withdraw for valid and invalid withdrawals, handling both IllegalArgumentException and 
InsufficientFundsException.

Note : Ensure that the program provides informative error messages and handles exceptions appropriately.

Ques - 2
-------------------
Shopping Cart Item Addition

You are assigned to develop a Java program for a simple online shopping cart using the ShoppingCart class. The class involves 
two custom exceptions: a checked exception (InvalidItemException) and an unchecked exception (OutOfStockException). 
These exceptions are designed to handle different scenarios related to adding items to a shopping cart.

* InvalidItemException (Checked Exception):
-> This exception should be thrown when an attempt is made to add an invalid quantity of items (non-positive) or when there are 
not enough items in stock for the specified quantity.

* OutOfStockException (Unchecked Exception):
-> This exception should be thrown when an attempt is made to add items exceeding the available stock.

* ShoppingCart Class:
-> The class should have a private instance variable availableItems representing the number of items in stock.
-> Implement a constructor to initialize the initial number of available items.
-> Implement a method addItem(int quantity) that adds items to the cart, throwing InvalidItemException for invalid quantities or 
insufficient stock.
-> Implement a method addItemUnchecked(int quantity) that simulates adding items, throwing OutOfStockException for 
quantities exceeding the available stock and handling IllegalArgumentException for invalid quantities.

* Main Class (ShoppingCartScenario):

-> In the main method, create an instance of ShoppingCart with an initial stock of 50 items.
-> Demonstrate the use of addItem for valid and invalid quantities, handling the InvalidItemException.
-> Demonstrate the use of addItemUnchecked for valid and invalid quantities, handling both IllegalArgumentException and
OutOfStockException.

Note: Ensure that the program provides clear error messages and handles exceptions appropriately.


Ques : 3
---------------
Seat Reservation System:

You are tasked with developing a Java program for a simple seat reservation system using the ReservationSystem class.
 This class involves two custom exceptions: a checked exception (SeatUnavailableException) and an unchecked exception
 (InvalidReservationException). These exceptions are designed to handle different scenarios related to reserving seats.

* SeatUnavailableException (Checked Exception):
->This exception should be thrown when an attempt is made to reserve seats that are not available at the moment or when there are 
insufficient seats for the specified reservation.

* InvalidReservationException (Unchecked Exception):
->This exception should be thrown when an attempt is made to reserve seats when no seats are available.


* ReservationSystem Class:

-> The class should have a private instance variable availableSeats representing the number of available seats.
-> Implement a constructor to initialize the initial number of available seats.
-> Implement a method reserveSeat(int numberOfSeats) that reserves seats, throwing SeatUnavailableException for unavailability
or insufficient seats.
-> Implement a method reserveSeatUnchecked(int numberOfSeats) that simulates reserving seats, throwing
 InvalidReservationException for no available seats and handling SeatUnavailableException for insufficient seats.


* Main Class (ReservationSystemScenario):

-> In the main method, create an instance of ReservationSystem with an initial number of available seats (e.g., 30).
-> Demonstrate the use of reserveSeat for valid and invalid seat reservations, handling the SeatUnavailableException.
-> Demonstrate the use of reserveSeatUnchecked for valid and invalid seat reservations, handling both InvalidReservationException and SeatUnavailableException.
-> Ensure that the program provides clear error messages and handles exceptions appropriately.

